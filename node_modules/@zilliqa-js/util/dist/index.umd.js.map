{"version":3,"file":"index.umd.js","sources":["../src/bytes.ts","../src/validation.ts","../src/unit.ts","../src/index.ts"],"sourcesContent":["//  Copyright (C) 2018 Zilliqa\n//\n//  This file is part of Zilliqa-Javascript-Library.\n//\n//  This program is free software: you can redistribute it and/or modify\n//  it under the terms of the GNU General Public License as published by\n//  the Free Software Foundation, either version 3 of the License, or\n//  (at your option) any later version.\n//\n//  This program is distributed in the hope that it will be useful,\n//  but WITHOUT ANY WARRANTY; without even the implied warranty of\n//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//  GNU General Public License for more details.\n//\n//  You should have received a copy of the GNU General Public License\n//  along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * intToHexArray\n *\n * @param {number} int - the number to be converted to hex\n * @param {number)} size - the desired width of the hex value. will pad.\n *\n * @returns {string[]}\n */\nexport const intToHexArray = (int: number, size: number): string[] => {\n  const hex: string[] = [];\n  const hexRep: string[] = [];\n  const hexVal = int.toString(16);\n\n  // TODO: this really needs to be refactored.\n  for (let i = 0; i < hexVal.length; i++) {\n    hexRep[i] = hexVal[i].toString();\n  }\n\n  for (let i = 0; i < size - hexVal.length; i++) {\n    hex.push('0');\n  }\n\n  for (let i = 0; i < hexVal.length; i++) {\n    hex.push(hexRep[i]);\n  }\n\n  return hex;\n};\n\n/**\n * intToByteArray\n *\n * Converts a number to Uint8Array\n *\n * @param {number} num\n * @param {number} size\n *\n * @returns {Uint8Array}\n */\nexport const intToByteArray = (num: number, size: number): Uint8Array => {\n  let x = num;\n  const res: number[] = [];\n\n  while (x > 0) {\n    res.push(x & 255);\n    x = x >> 8;\n  }\n\n  const pad = size - res.length;\n\n  for (let i = 0; i < pad; i++) {\n    res.unshift(0);\n  }\n\n  return Uint8Array.from(res);\n};\n\n/**\n * hexToByteArray\n *\n * Convers a hex string to a Uint8Array\n *\n * @param {string} hex\n * @returns {Uint8Array}\n */\nexport const hexToByteArray = (hex: string): Uint8Array => {\n  const res = new Uint8Array(hex.length / 2);\n\n  for (let i = 0; i < hex.length; i += 2) {\n    res[i / 2] = parseInt(hex.substring(i, i + 2), 16);\n  }\n\n  return res;\n};\n\n/**\n * hexToIntArray\n *\n * @param {string} hex\n * @returns {number[]}\n */\nexport const hexToIntArray = (hex: string): number[] => {\n  if (!hex || !isHex(hex)) {\n    return [];\n  }\n\n  const res = [];\n\n  for (let i = 0; i < hex.length; i++) {\n    const c = hex.charCodeAt(i);\n    const hi = c >> 8;\n    const lo = c & 0xff;\n\n    hi ? res.push(hi, lo) : res.push(lo);\n  }\n\n  return res;\n};\n\n/**\n * pack\n *\n * Takes two 16-bit integers and combines them. Used to compute version.\n *\n * @param {number} a\n * @param {number} b\n *\n * @returns {number} - a 32-bit number\n */\nexport const pack = (a: number, b: number): number => {\n  if (a >> 16 > 0 || b >> 16 > 0) {\n    throw new Error('Both a and b must be 16 bits or less');\n  }\n\n  return (a << 16) + b;\n};\n\n/**\n * compareBytes\n *\n * A constant time HMAC comparison function.\n *\n * @param {string} a\n * @param {string} b\n * @returns {boolean}\n */\nexport const isEqual = (a: string, b: string): boolean => {\n  const bzA = hexToIntArray(a);\n  const bzB = hexToIntArray(b);\n\n  if (bzA.length !== bzB.length) {\n    return false;\n  }\n\n  let result = 0;\n  for (let i = 0; i < bzA.length; i++) {\n    result |= bzA[i] ^ bzB[i];\n  }\n\n  return result === 0;\n};\n\n/**\n * isHex\n *\n * @param {string} str - string to be tested\n * @returns {boolean}\n */\nexport const isHex = (str: string): boolean => {\n  const plain = str.replace('0x', '');\n  return /[0-9a-f]*$/i.test(plain);\n};\n","//  Copyright (C) 2018 Zilliqa\n//\n//  This file is part of Zilliqa-Javascript-Library.\n//\n//  This program is free software: you can redistribute it and/or modify\n//  it under the terms of the GNU General Public License as published by\n//  the Free Software Foundation, either version 3 of the License, or\n//  (at your option) any later version.\n//\n//  This program is distributed in the hope that it will be useful,\n//  but WITHOUT ANY WARRANTY; without even the implied warranty of\n//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//  GNU General Public License for more details.\n//\n//  You should have received a copy of the GNU General Public License\n//  along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport BN from 'bn.js';\nimport Long from 'long';\n\nexport const isAddress = (address: string) => {\n  return isByteString(address, 40);\n};\n\nexport const isBech32 = (raw: string) => {\n  return !!raw.match(/^zil1[qpzry9x8gf2tvdw0s3jn54khce6mua7l]{38}$/);\n};\n\nexport const isBase58 = (raw: string) => {\n  return !!raw.match(\n    /^[1-9ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]+$/,\n  );\n};\n\nexport const isPrivateKey = (privateKey: string) => {\n  return isByteString(privateKey, 64);\n};\n\nexport const isPubKey = (pubKey: string) => {\n  return isByteString(pubKey, 66);\n};\n\nexport const isSignature = (sig: string) => {\n  return isByteString(sig, 128);\n};\n\nexport const isByteString = (str: string, len: number) => {\n  return !!str.replace('0x', '').match(`^[0-9a-fA-F]{${len}}$`);\n};\n\nexport const isNumber = (x: unknown): x is number => {\n  return typeof x === 'number';\n};\n\nexport const isBN = (x: unknown): x is BN => {\n  return BN.isBN(x);\n};\n\nexport const isLong = (x: unknown): x is Long => {\n  return Long.isLong(x);\n};\n\nexport const isString = (x: unknown): x is string => {\n  return typeof x === 'string';\n};\n\nexport const isPlainObject = (x: unknown): x is { [key: string]: any } => {\n  if (typeof x === 'object' && x !== null) {\n    const proto = Object.getPrototypeOf(x);\n    return proto === Object.prototype || proto === null;\n  }\n\n  return false;\n};\n\nconst PRAGMA_REQUIRED = '@@ZJS_REQUIRED@@';\n\nexport interface Validator extends Function {\n  required?: typeof PRAGMA_REQUIRED;\n}\n\nexport const required = <T extends Function>(fn: T): Validator => {\n  if (typeof fn === 'function') {\n    return Object.defineProperty(fn, 'required', {\n      value: PRAGMA_REQUIRED,\n    });\n  }\n\n  throw new Error('fn is not a function');\n};\n\nexport const matchesObject = <T extends object>(\n  x: unknown,\n  test: { [key: string]: Validator[] },\n): x is T => {\n  if (isPlainObject(x)) {\n    for (const key in test) {\n      if (test.hasOwnProperty(key)) {\n        for (const tester of test[key]) {\n          const value = x[key];\n\n          if (typeof value === 'undefined' && tester.required) {\n            throw new Error('Key not found: ' + key);\n          } else {\n            continue;\n          }\n        }\n      }\n    }\n  }\n\n  return true;\n};\n","//  Copyright (C) 2018 Zilliqa\n//\n//  This file is part of Zilliqa-Javascript-Library.\n//\n//  This program is free software: you can redistribute it and/or modify\n//  it under the terms of the GNU General Public License as published by\n//  the Free Software Foundation, either version 3 of the License, or\n//  (at your option) any later version.\n//\n//  This program is distributed in the hope that it will be useful,\n//  but WITHOUT ANY WARRANTY; without even the implied warranty of\n//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//  GNU General Public License for more details.\n//\n//  You should have received a copy of the GNU General Public License\n//  along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * Adapted from https://github.com/ethjs/ethjs-unit/blob/master/src/index.js\n */\nimport BN from 'bn.js';\n\nexport enum Units {\n  Zil = 'zil',\n  Li = 'li',\n  Qa = 'qa',\n}\n\ninterface Options {\n  pad: boolean;\n}\n\nconst DEFAULT_OPTIONS = {\n  pad: false,\n};\n\nconst unitMap = new Map<Units, string>([\n  [Units.Qa, '1'],\n  [Units.Li, '1000000'], // 1e6 qa\n  [Units.Zil, '1000000000000'], // 1e12 qa\n]);\n\nconst numToStr = (input: string | number | BN) => {\n  if (typeof input === 'string') {\n    if (!input.match(/^-?[0-9.]+$/)) {\n      throw new Error(\n        `while converting number to string, invalid number value '${input}', should be a number matching (^-?[0-9.]+).`,\n      );\n    }\n    return input;\n  } else if (typeof input === 'number') {\n    return String(input);\n  } else if (BN.isBN(input)) {\n    return input.toString(10);\n  }\n\n  throw new Error(\n    `while converting number to string, invalid number value '${input}' type ${typeof input}.`,\n  );\n};\n\nexport const fromQa = (\n  qa: BN,\n  unit: Units,\n  options: Options = DEFAULT_OPTIONS,\n): string => {\n  if (unit === 'qa') {\n    return qa.toString(10);\n  }\n\n  const baseStr = unitMap.get(unit);\n\n  if (!baseStr) {\n    throw new Error(`No unit of type ${unit} exists.`);\n  }\n\n  const base = new BN(baseStr, 10);\n  const baseNumDecimals = baseStr.length - 1;\n\n  let fraction = qa.abs().mod(base).toString(10);\n\n  // prepend 0s to the fraction half\n  while (fraction.length < baseNumDecimals) {\n    fraction = `0${fraction}`;\n  }\n\n  if (!options.pad) {\n    fraction = <string>(\n      (<RegExpMatchArray>fraction.match(/^([0-9]*[1-9]|0)(0*)/))[1]\n    );\n  }\n\n  const whole = qa.div(base).toString(10);\n\n  return fraction === '0' ? `${whole}` : `${whole}.${fraction}`;\n};\n\nexport const toQa = (input: string | number | BN, unit: Units) => {\n  let inputStr = numToStr(input);\n  const baseStr = unitMap.get(unit);\n\n  if (!baseStr) {\n    throw new Error(`No unit of type ${unit} exists.`);\n  }\n\n  const baseNumDecimals = baseStr.length - 1;\n  const base = new BN(baseStr, 10);\n\n  // Is it negative?\n  const isNegative = inputStr.substring(0, 1) === '-';\n  if (isNegative) {\n    inputStr = inputStr.substring(1);\n  }\n\n  if (inputStr === '.') {\n    throw new Error(`Cannot convert ${inputStr} to Qa.`);\n  }\n\n  // Split it into a whole and fractional part\n  const comps = inputStr.split('.'); // eslint-disable-line\n  if (comps.length > 2) {\n    throw new Error(`Cannot convert ${inputStr} to Qa.`);\n  }\n\n  let [whole, fraction] = comps;\n\n  if (!whole) {\n    whole = '0';\n  }\n  if (!fraction) {\n    fraction = '0';\n  }\n  if (fraction.length > baseNumDecimals) {\n    throw new Error(`Cannot convert ${inputStr} to Qa.`);\n  }\n\n  while (fraction.length < baseNumDecimals) {\n    fraction += '0';\n  }\n\n  const wholeBN = new BN(whole);\n  const fractionBN = new BN(fraction);\n  let wei = wholeBN.mul(base).add(fractionBN); // eslint-disable-line\n\n  if (isNegative) {\n    wei = wei.neg();\n  }\n\n  return new BN(wei.toString(10), 10);\n};\n","//  Copyright (C) 2018 Zilliqa\n//\n//  This file is part of Zilliqa-Javascript-Library.\n//\n//  This program is free software: you can redistribute it and/or modify\n//  it under the terms of the GNU General Public License as published by\n//  the Free Software Foundation, either version 3 of the License, or\n//  (at your option) any later version.\n//\n//  This program is distributed in the hope that it will be useful,\n//  but WITHOUT ANY WARRANTY; without even the implied warranty of\n//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n//  GNU General Public License for more details.\n//\n//  You should have received a copy of the GNU General Public License\n//  along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport * as bytes from './bytes';\nimport * as validation from './validation';\nimport * as units from './unit';\nimport BN from 'bn.js';\nimport Long from 'long';\n\nexport { BN, bytes, Long, units, validation };\n"],"names":["__values","__read"],"mappings":"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"}